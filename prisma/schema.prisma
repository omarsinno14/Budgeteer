// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// NextAuth core models
model User {
  id             String     @id @default(cuid())
  name           String?
  email          String?    @unique
  emailVerified  DateTime?
  image          String?
  passwordHash   String?    // for credentials login
  phone          String?
  region         String?
  country        String?
  accounts       Account[]
  sessions       Session[]
  households     Household[]
  createdAt      DateTime   @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String

  // SQLite: no @db.Text
  refresh_token     String?
  access_token      String?

  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Budgeteer domain models
model Household {
  id            String        @id @default(cuid())
  userId        String
  country       String
  region        String
  size          Int
  childrenCount Int           @default(0)
  hasDependents Boolean       @default(false)
  incomes       IncomeProfile[]
  plans         BudgetPlan[]
  user          User          @relation(fields: [userId], references: [id])
}

model IncomeProfile {
  id           String    @id @default(cuid())
  householdId  String
  grossAnnual  Int
  payFrequency String    @default("ANNUAL")
  currency     String    @default("CAD")
  createdAt    DateTime  @default(now())
  household    Household @relation(fields: [householdId], references: [id])
}

model BudgetPlan {
  id                String   @id @default(cuid())
  householdId       String
  netAnnual         Int
  rentCap           Int
  savingsPct        Float
  debtsPct          Float
  essentialsPct     Float
  discretionaryPct  Float
  version           String
  recommendations   Recommendation[]
  household         Household @relation(fields: [householdId], references: [id])
}

model Recommendation {
  id            String    @id @default(cuid())
  planId        String
  ruleVersion   String
  mlVersion     String?
  allocations   String     // store JSON as string in SQLite
  explanation   String
  createdAt     DateTime  @default(now())
  feedback      Feedback[]
  plan          BudgetPlan @relation(fields: [planId], references: [id])
}

model Feedback {
  id               String   @id @default(cuid())
  recommendationId String
  usefulnessScore  Int
  userAdjustments  String?  // store JSON as string in SQLite
  comment          String?
  createdAt        DateTime @default(now())
  recommendation   Recommendation @relation(fields: [recommendationId], references: [id])
}
